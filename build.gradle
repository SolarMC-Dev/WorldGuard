buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

plugins {
    id "pl.allegro.tech.build.axion-release" version "1.13.3"
}

if (!project.hasProperty("gitCommitHash")) {
    try {
        def repo = org.ajoberstar.grgit.Grgit.open(project.file('.'))
        ext.gitCommitHash = repo.head().abbreviatedId
    } catch (Exception e) {
        ext.gitCommitHash = "no_git_id"
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = 'gg.solarmc.worldguard'
    version = scmVersion.version
    ext.internalVersion = version + ";" + gitCommitHash

    sourceCompatibility = 16
    targetCompatibility = 16

    repositories {
        mavenCentral()
        maven { url "https://maven.sk89q.com/repo/" }
        maven { url "https://mvn-repo.solarmc.gg/releases" }
        maven { url "https://mvn-repo.arim.space/lesser-gpl3/" }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        // Java 8 turns on doclint which we fail
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    build.dependsOn(sourcesJar)
    build.dependsOn(javadocJar)

    shadowJar {
        classifier ''
        dependencies {
            include(dependency('org.khelekore:prtree:1.5.0'))
        }
        exclude 'GradleStart**'
        exclude '.cache'
        exclude 'LICENSE*'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
        }
        repositories {
            maven {
                credentials {
                    username System.getenv("REPO_USER")
                    password System.getenv("REPO_PASS")
                }

                name = 'solar-repo'
                def base = 'https://mvn-repo.solarmc.gg'
                def releasesRepoUrl = "$base/releases"
                def snapshotsRepoUrl = "$base/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }
}
